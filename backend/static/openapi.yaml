openapi: 3.0.3
info:
  title: Backend Service for UKRIDA Portal System
  description: |-
    Backend Service with Flask and MongoDB
  contact:
    email: hendrik.tampubolon@ukrida.ac.id
  version: 1.0.11
servers:
  - url: "{protocol}://{serverip}:{port}/api/v1"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      serverip:
        default: 0.0.0.0
        description: server IP
      port:
        default: "5000"
        description: assigned port

tags:
  - name: User
    description: Endpoint for managing user
  - name: Courses
    description: Endpoint for managing courses
  - name: Announcement
    description: Endpoint for managing announcement
  - name: Billings
    description: Endpoint for managing billing
  - name: ETicket
    description: Endpoint for managing e-ticket
  - name: Library
    description: Endpoint for managing e-library

paths:
  /user:
    post:
      tags:
        - User
      summary: Register User
      description: |
        Create user endpoint
        ```
        curl --location --request POST '`${url}`/api/v1/user' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "username": "api_user",
                "password": "siwp2005"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  id:
                    type: string
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /login:
    post:
      tags:
        - User
      summary: Login Endpoint
      description: |
        login endpoint
        ```
        curl --location --request POST '`${url}`/api/v1/login' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "username": "api_user",
                "password": "siwp2005"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /courses:
    post:
      tags:
        - Courses
      summary: Add Course
      security:
        - BearerAuth: []
      description: |
        Create new course
        ```
        curl --location --request POST '`${url}`/api/v1/courses' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "kode_mk": "SIWP2005",
                "semester": "2",
                "nama_mk": "OOP",
                "sks": "6",
                "nama_prof": "Pak Hendrik",
                "description": "OOP course"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoursePostRequestBody"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
    get:
      tags:
        - Courses
      summary: Get All Courses
      security:
        - BearerAuth: []
      description: |
        Get courses resource
        ```
        curl --location --request GET '`${url}`/api/v1/courses' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CourseObject"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /courses/{course_id}:
    parameters:
      - name: course_id
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Courses
      summary: Get course by course ID
      security:
        - BearerAuth: []
      description: |
        Get course resource
        ```
        curl --location --request GET '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Courses
      summary: Delete Course By ID
      security:
        - BearerAuth: []
      description: |
        Delete Courses resource by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: Course successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist
    put:
      tags:
        - Courses
      summary: "Edit Course"
      security:
        - BearerAuth: []
      description: |
        Edit the details of Course
        ```
        curl --location --request PUT '`${url}`/api/v1/courses/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "kode_mk":"string",
                "nama_mk":"string" ,
                "semester": "string",
                "sks": 0,
                "description": "string"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoursePostRequestBody"

      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseObject"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /attendance:
    post:
      tags:
        - Courses
      summary: Add Attendance
      security:
        - BearerAuth: []
      description: |
        Create new attendance
        ```
        curl --location --request POST '`${url}`/api/v1/attendance' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "course_name": "OOP",
                "student_name": "Ucup",
                "attendance": true
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attendance"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendance"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
    
  /attendance/{student_name}:
    parameters:
      - name: student_name
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Courses
      summary: Get attendance by student's name
      security:
        - BearerAuth: []
      description: |
        Get Student's attendance
        ```
        curl --location --request GET '`${url}`/api/v1/attendance/{student_name}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendance"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
    put:
      tags:
        - Courses
      summary: "Edit Attendance by student's name"
      security:
        - BearerAuth: []
      description: |
        Edit the details of student's attendance
        ```
        curl --location --request PUT '`${url}`/api/v1/attendance/{student_name}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "course_name": "OOP",
                "student_name": "Ucup",
                "attendance": true
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attendance"

      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendance"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /course_activity:
    post:
      tags:
        - Courses
      summary: Add Course Activity
      security:
        - BearerAuth: []
      description: |
        Create new activity
        ```
        curl --location --request POST '`${url}`/api/v1/course_activity' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "course_name": "OOP",
                "activity_tupe": "UAS",
                "deadline": "30/6/2024 23:59""
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course_Activity"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course_Activity"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /course_activity/{course_activity_id}:
    parameters:
      - name: course_activity_id
        in: path
        required: true
        schema:
          type: string
    
    put:
      tags:
        - Courses
      summary: "Edit course activity by id"
      security:
        - BearerAuth: []
      description: |
        Edit a course activity details
        ```
        curl --location --request PUT '`${url}`/api/v1/course_activity/{course_activity_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "course_name": "OOP",
                "activity_tupe": "UAS",
                "deadline": "3/7/2024 23:59""
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course_Activity"

      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course_Activity"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
    delete:
      tags:
        - Courses
      summary: Delete Course Activity By ID
      security:
        - BearerAuth: []
      description: |
        Delete Courses activity by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/course_activity/{course_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: Course successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist

  /course_activity/{course_name}:
    parameters:
      - name: course_name
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Courses
      summary: Get course activity by course name
      security:
        - BearerAuth: []
      description: |
        Get Course's activity
        ```
        curl --location --request GET '`${url}`/api/v1/course_activity/{course_name}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course_Activity"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /score:
    post:
      tags:
        - Courses
      summary: Add score
      security:
        - BearerAuth: []
      description: |
        Create new score
        ```
        curl --location --request POST '`${url}`/api/v1/score' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "course_name": "OOP",
                "activity_type": "UAS",
                "student_name": "Ucup",
                "score": ""
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Score"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /score/{score_id}:
    parameters:
      - name: score_id
        in: path
        required: true
        schema:
          type: string

    put:
      tags:
        - Courses
      summary: "Edit Score Input"
      security:
        - BearerAuth: []
      description: |
        Edit the score input
        ```
        curl --location --request PUT '`${url}`/api/v1/score/{score_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "course_name": "OOP",
                "activity_type": "UAS",
                "student_name": "Ucup",
                "score": "100"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Score"

      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /score/{student_name}:
    parameters:
      - name: student_name
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Courses
      summary: Get score by student name
      security:
        - BearerAuth: []
      description: |
        Get specific stduent's score list
        ```
        curl --location --request GET '`${url}`/api/v1/score/{student_name}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /score/{course_name}:
    parameters:
      - name: course_name
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - Courses
      summary: Get score list by course name
      security:
        - BearerAuth: []
      description: |
        Get Course's score list
        ```
        curl --location --request GET '`${url}`/api/v1/score/{course_name}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /announcement:
    get:
      tags:
        - Announcement
      summary: Get Announcement
      security:
        - BearerAuth: []
      description: |
        Get course resource
        ```
        curl --location --request GET '`${url}`/api/v1/announcement' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    post:
      tags:
        - Announcement
      summary: content
      description: |
        Create endpoint
        ```
        curl --location --request POST '`${url}`/api/v1/announcement' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "content_announcement": "string"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content_announcement:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcementobject1"
                type: object
                properties:
                  username:
                    type: string
                  id:
                    type: string
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcementobject1"
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /calender_announcement:
    post:
        tags:
          - Announcement
        summary: calender
        description: |
          calender_announcement endpoint
          ```
          curl --location --request POST '`${url}`/api/v1/announcement' \
              --header 'Content-Type: application/json' \
              --data-raw '{
                  "calender_announcement": "date_type""
              }'
          ```
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcementobject2"
                type: object
                properties:
                  calender_announcement:
                    type: string
                  description:
                    type: string
        responses:
          "200":
            description: "Success response"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Announcementobject2"
                  type: object
                  properties:
                    token:
                      type: string
          "default":
            description: |
              ```
              400 - Bad Request
              401 - Unauthorized
              403 - Forbidden
              404 - Not Found
              422 - Unprocessable Entity
              500 - Error on server
              ```
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    detail:
                      type: string
                      description: "error description"
                      example: "Server Error"

  /billings:
    get:
      tags:
        - Billings
      summary: Get All Billings
      security:
        - BearerAuth: []
      description: |
        Get billing resource
        ```
        curl --location --request GET '`${url}`/api/v1/billings' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Billing"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /billings/{status}:
    parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
    get:
      tags:
        - Billings
      summary: Get All Billings by status (paid or unpaid)
      security:
        - BearerAuth: []
      description: |
        Get billing resource
        ```
        curl --location --request GET '`${url}`/api/v1/billings' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Billing"
        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /billing/{student_name}:
    parameters:
      - name: student_name
        in: path
        required: true
        schema:
          type: string

    post:
      tags:
        - Billings
      summary: Add Billing
      security:
        - BearerAuth: []
      description: |
        Create new billing
        ```
        curl --location --request POST '`${url}`/api/v1/billing' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "student_name": "joni",
                "billing": "10000000",
                "description": "billing semester 2",
                "status": "unpaid"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Billing"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Billings
      summary: Delete Billing by ID
      security:
        - BearerAuth: []
      description: |
        Delete Billing resource by ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/billing/{student_name}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: Billing successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist
    put:
      tags:
        - Billings
      summary: "Edit Billing"
      security:
        - BearerAuth: []
      description: |
        Edit the details of Course
        ```
        curl --location --request PUT '`${url}`/api/v1/billing/{student_name}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "student_name": "joni",
                "billing": "10000000",
                "description": "billing semester 2",
                "status": "paid"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Billing"

      responses:
        "200":
          description: "Edit Billing Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"
  /eticket:
    post:
      tags:
        - ETicket
      summary: Cari atau Buat E-Ticket
      security:
        - BearerAuth: []
      description: |
        Cari e-ticket berdasarkan judul laporan atau tanggal laporan, atau buat e-ticket baru
        ```
        curl --location --request POST '`${url}`/api/v1/eticket' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "judul_laporan": "string",
                "tanggal_laporan": "string",
                "deskripsi": "string",
                "pelapor": "string"
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                judul_laporan:
                  type: string
                tanggal_laporan:
                  type: string
                deskripsi:
                  type: string
                pelapor:
                  type: string
      responses:
        "200":
          description: "Respon sukses"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ETicket"
                type: object
                properties:
                  judul_laporan:
                    type: string
                  tanggal_laporan:
                    type: string
                  deskripsi:
                    type: string
                  pelapor:
                    type: string
        "default":
          description: |
            ```
            400 - Permintaan Buruk
            401 - Tidak Sah
            403 - Dilarang
            404 - Tidak Ditemukan
            422 - Entitas Tidak Dapat Diproses
            500 - Kesalahan pada server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "deskripsi kesalahan"
                    example: "Kesalahan Server"

  /eticket/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - ETicket
      summary: Hapus E-Ticket
      security:
        - BearerAuth: []
      description: |
        Hapus e-ticket berdasarkan ID
        ```
        curl --location --request DELETE '`${url}`/api/v1/eticket/{id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Respon sukses"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ETicket deleted successfully"

        "404":
          description: "ETicket tidak ditemukan"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ETicket not found"

        "default":
          description: |
            ```
            400 - Permintaan Buruk
            401 - Tidak Sah
            403 - Dilarang
            422 - Entitas Tidak Dapat Diproses
            500 - Kesalahan pada server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "deskripsi kesalahan"
                    example: "Kesalahan Server"
  
  /books:
    get:
      tags:
        - Library
      summary: Get all books
      security:
        - BearerAuth: []
      description: |
        Get all books in library
        ```
        curl --location --request GET '`${url}`/api/v1/book' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    post:
      tags:
        - Library
      summary: Add new book
      security:
        - BearerAuth: []
      description: |
        Create new book
        ```
        curl --location --request POST '`${url}`/api/v1/book' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "title": "Python Book: The Ultimate Guide to Coding",
                "author": "Amy Best",
                "publisher": "Imagine Publishing",
                "publication_year": "2016",
                "genre": "",
                "description": ""
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /books/{title}:
    parameters:
      - name: title
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Library
      summary: Get books by title
      security:
        - BearerAuth: []
      description: |
        Get books by title in library
        ```
        curl --location --request GET '`${url}`/api/v1/book/{title}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /books/{author}:
    parameters:
      - name: author
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Library
      summary: Get books by author
      security:
        - BearerAuth: []
      description: |
        Get books by author in library
        ```
        curl --location --request GET '`${url}`/api/v1/book/{author}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /books/{book_id}:
    parameters:
      - name: book_id
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Library
      summary: "Edit Book"
      security:
        - BearerAuth: []
      description: |
        Edit book
        ```
        curl --location --request PUT '`${url}`/api/v1/book/{book_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "title": "Python Book: The Ultimate Guide to Coding",
                "author": "Amy Best",
                "publisher": "Imagine Publishing",
                "publication_year": "2016",
                "genre": "",
                "description": ""
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"

      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Library
      summary: Delete book
      security:
        - BearerAuth: []
      description: |
        Delete book
        ```
        curl --location --request DELETE '`${url}`/api/v1/book/{book_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: Book successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist

  /journal:
    get:
      tags:
        - Library
      summary: Get all journal
      security:
        - BearerAuth: []
      description: |
        Get all journal in library
        ```
        curl --location --request GET '`${url}`/api/v1/journal' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journal"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    post:
      tags:
        - Library
      summary: Add new journal
      security:
        - BearerAuth: []
      description: |
        Create new journal
        ```
        curl --location --request POST '`${url}`/api/v1/journal' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "title": "Python - The Fastest Growing Programming Language",
                "author": "K. R. Srinath",
                "publication_year": "2017",
                "description": ""
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"

      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /journal/{title}:
    parameters:
      - name: title
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Library
      summary: Get journal by title
      security:
        - BearerAuth: []
      description: |
        Get journal by title in library
        ```
        curl --location --request GET '`${url}`/api/v1/journal/{title}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journal"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /journal/{author}:
    parameters:
      - name: author
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Library
      summary: Get all journal
      security:
        - BearerAuth: []
      description: |
        Get all journal in library
        ```
        curl --location --request GET '`${url}`/api/v1/journal/{author}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: "Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journal"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

  /journal/{journal_id}:
    parameters:
      - name: journal_id
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Library
      summary: "Edit Journal"
      security:
        - BearerAuth: []
      description: |
        Edit journal
        ```
        curl --location --request PUT '`${url}`/api/v1/journal/{journal_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
            --data-raw '{
                "title": "Python - The Fastest Growing Programming Language",
                "author": "K. R. Srinath",
                "publication_year": "2017",
                "description": ""
            }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Journal"

      responses:
        "200":
          description: "Edit Courses Success response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journal"

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: "error description"
                    example: "Server Error"

    delete:
      tags:
        - Library
      summary: Delete Journal
      security:
        - BearerAuth: []
      description: |
        Delete Journal
        ```
        curl --location --request DELETE '`${url}`/api/v1/journal/{journal_id}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer {TOKEN} \
        ```
      responses:
        "200":
          description: Journal successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Success

        "default":
          description: |
            ```
            400 - Bad Request
            401 - Unauthorized
            403 - Forbidden
            404 - Not Found
            422 - Unprocessable Entity
            500 - Error on server
            ```
          content:
            application/json:
              schema:
                type: object
              example:
                message: Resource not exist

components:
  schemas:
    CourseObject:
      type: object
      required:
        - kode_mk
        - nama_mk
        - semester
        - sks
      properties:
        id:
          description: course id
          type: string
        kode_mk:
          description: course code
          type: string
        nama_mk:
          description: course name
          type: string
        semester:
          description: course semester
          type: string
        sks:
          description: course sks
          type: number
        description:
          description: course description
          type: string

        user:
          description: user own the resource
          type: object
          properties:
            id:
              description: user ID
              type: string
            name:
              description: user name
              type: string

    CoursePostRequestBody:
      type: object
      required:
        - kode_mk
        - nama_mk
        - semester
        - sks
      properties:
        kode_mk:
          description: course code
          type: string
        nama_mk:
          description: course name
          type: string
        semester:
          description: course semester
          type: string
        sks:
          description: course sks
          type: number
        description:
          description: course description
          type: string
    
    Attendance:
      type: object
      required:
          - course_name
          - student_name
          - attendance
      properties:
        course_name:
          type: string
          example: "OOP"
        student_name:
          type: string
          example: "Ucup"
        attendance:
          type: boolean
          example: true

    Course_Activity:
      type: object
      required:
          - course_name
          - activity_type
          - deadline
      properties:
        course_name:
          type: string
          example: "OOP"
        activity_type:
          type: string
          example: "UAS"
        deadline:
          type: string
          example: "30/6/2024 23:59"

    Score:
      type: object
      required:
          - course_name
          - activity_type
          - student_name
      properties:
        course_name:
          type: string
          example: "OOP"
        activity_type:
          type: string
          example: "UAS"
        student_name:
          type: string
          example: "Ucup"
        Score:
          type: string
          example: ""

    Announcement:
      type: object
      required:
          - content_announcement
          - calender_announcement
          - description
      properties:
        content_announcement:
          type: string
          example: "hai hai hari ini adalah pengumpulan terakhir UAS, JANGAN SAMPAI TERLEWAT YA!!"
        calender_announcement:
          type: string
          example: "date_type"
        description:
          type: string
          example: "string"

    Announcementobject1:
      type: object
      required:
          - content_announcement
          - description
      properties:
        content_announcement:
          type: string
          example: "hai hai hari ini adalah pengumpulan terakhir UAS, JANGAN SAMPAI TERLEWAT YA!!"
        description:
          type: string
          example: "string"
    
    Announcementobject2:
      type: object
      required:
          - content_announcement
          - description
      properties:
        calender_announcement:
          type: string
          example: "date_type"
        description:
          type: string
          example: "string"
  
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: Error description
          example: "Server Error"
    
    Billing:
      type: object
      required:
        - student_name
        - billing
        - description
        - status
      properties:
        student_name:
          description: student's name
          type: string
        billing:
          description: student's billing ammount
          type: number
        description:
          description: billing description
          type: string
        status:
          description: student's billing status ("paid" or "unpaid")
          type: string
    
    ETicket:
      type: object
      required:
        - judul_laporan
        - tanggal_laporan
        - deskripsi
        - pelapor
        - status
      properties:
        judul_laporan:
          type: string
          description: "Judul laporan e-ticket"
        tanggal_laporan:
          type: string
          format: date
          description: "Tanggal laporan e-ticket"
        deskripsi:
          type: string
          description: "Deskripsi e-ticket"
        pelapor:
          type: string
          description: "Pelapor e-ticket"
        status:
          type: string
          description: "Status e-ticket"
          enum:
            - open
            - closed
    Book:
      type: object
      required:
        - title
        - author
        - publisher
        - publication_year

      properties:
        title:
          type: string
          description: "Python Book: The Ultimate Guide to Coding"
        author:
          type: string
          description: "Amy Best"
        publisher:
          type: string
          description: "Imagine Publishing"
        publication_year:
          type: integer
          description: "2016"
        genre:
          type: string
          description: ""
        description:
          type: string
          description: ""
    
    Journal:
      type: object
      required:
        - title
        - author
        - publication_year

      properties:
        title:
          type: string
          description: "Python - The Fastest Growing Programming Language"
        author:
          type: string
          description: "K. R. Srinath"
        publication_year:
          type: integer
          description: "2017"
        description:
          type: string
          description: ""

  securitySchemes:
    BearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
